[
    {
        "id": "f66752a974742c78",
        "type": "tab",
        "label": "InfiniSolar zu InfluxDB_old",
        "disabled": false,
        "info": ""
    },
    {
        "id": "34daaf14fa664b5f",
        "type": "mqtt in",
        "z": "f66752a974742c78",
        "name": "Infini MQTT",
        "topic": "infini2/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "ac9c3b24f8ec29a8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 100,
        "wires": [
            [
                "d3724155c8f87991"
            ]
        ]
    },
    {
        "id": "8b9ff3e87e62fea8",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Konvertierung und Routing",
        "func": "//return msg;\nconst field = msg.topic.split('/').pop();\nlet value = msg.payload;\n\n// Mapping Feldname → erwarteter Typ (string, int, float)\nconst typeMap = {\n    'netzspannung': 'float',\n    'netzfrequenz': 'float',\n    'ac_ausgangsspannung': 'float',\n    'ac_ausgangsfrequenz': 'float',\n    'ac_scheinleistung': 'float',\n    'ac_wirkleistung': 'float',\n    'ausgangslast': 'int',\n    'batteriespannung': 'float',\n    'batterieentladestrom': 'float',\n    'batterieladestrom': 'float',\n    'batteriekapazitaet': 'int',\n    'temperatur_gehaeuse': 'float',\n    'mppt1_temperatur': 'float',\n    'mppt2_temperatur': 'float',\n    'solarleistung1': 'float',\n    'solarleistung2': 'float',\n    'solarspannung1': 'float',\n    'solarspannung2': 'float',\n    'ladestatus1': 'int',\n    'ladestatus2': 'int',\n    'batteriestromrichtung': 'int',\n    'wr_stromrichtung': 'int',\n    'netzstromrichtung': 'int',\n    'firmware': 'float',\n    'mode': 'float',\n    'fehler': 'int',\n    'warnungen': 'int'\n};\n\n// Batteriespannung Korrektur (z. B. bei 0.02 → 0.0)\nif (field === 'batteriespannung' && parseFloat(value) < 1) {\n    value = \"0.0\";\n}\n\n// Allgemeine Normalisierung\nif (typeof value === 'string') {\n    value = value.trim().replace(/[^0-9.\\-]/g, '');\n}\n\nconst expectedType = typeMap[field] || 'float';\n\n// Konvertierung basierend auf Typ\nswitch (expectedType) {\n    case 'int':\n        value = parseInt(value, 10);\n        if (isNaN(value)) value = 0;\n        break;\n    case 'float':\n        value = parseFloat(value);\n        if (isNaN(value)) value = 0.0;\n        break;\n    case 'string':\n        value = String(value);\n        break;\n    default:\n        value = parseFloat(value);\n        if (isNaN(value)) value = 0.0;\n}\n\n// Topic für Measurement-Node\nmsg.topic = field;\nmsg.payload = value;\n\n// Measurement-Routing\nconst measurementMap = {\n    'netzspannung': 'Netz',\n    'netzfrequenz': 'Netz',\n    'ac_ausgangsspannung': 'AC',\n    'ac_ausgangsfrequenz': 'AC',\n    'ac_scheinleistung': 'AC',\n    'ac_wirkleistung': 'AC',\n    'ausgangslast': 'AC',\n    'batteriespannung': 'Batterie',\n    'batterieentladestrom': 'Batterie',\n    'batterieladestrom': 'Batterie',\n    'batteriekapazitaet': 'Batterie',\n    'temperatur_gehaeuse': 'Service',\n    'mppt1_temperatur': 'Service',\n    'mppt2_temperatur': 'Service',\n    'solarleistung1': 'PV',\n    'solarleistung2': 'PV',\n    'solarspannung1': 'PV',\n    'solarspannung2': 'PV',\n    'ladestatus1': 'Service',\n    'ladestatus2': 'Service',\n    'batteriestromrichtung': 'Service',\n    'wr_stromrichtung': 'Service',\n    'netzstromrichtung': 'Service',\n    'firmware': 'Info',\n    'mode': 'Service',\n    'fehler': 'Service',\n    'warnungen': 'Service'\n};\n\nmsg.measurement = measurementMap[field] || 'Unknown';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "a4e9c618543dfc1f",
                "8d5f68accb14e50f"
            ]
        ]
    },
    {
        "id": "a4e9c618543dfc1f",
        "type": "switch",
        "z": "f66752a974742c78",
        "name": "Measurement Routing",
        "property": "measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Netz",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "AC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Batterie",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PV",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Service",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Info",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 440,
        "y": 100,
        "wires": [
            [
                "37847c3d8f96ddef",
                "6829590926d31d85"
            ],
            [
                "f0069a5680d2f72c"
            ],
            [
                "c34fd4f27f32bf0b"
            ],
            [
                "5e3b50da5ec815df"
            ],
            [
                "be7a6b1c3b8b5614"
            ],
            [
                "091641c3a2a521c3"
            ]
        ]
    },
    {
        "id": "37847c3d8f96ddef",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Netz Measurement",
        "func": "msg.measurement = \"Netz\";\n\nif (msg.topic === 'netzspannung') {\n    msg.payload = { Spannung: msg.payload };\n} else if (msg.topic === 'netzfrequenz') {\n    msg.payload = { Frequenz: msg.payload };\n}\n\nmsg.tags = { device: \"infini2\" };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 60,
        "wires": [
            [
                "c259f35328502a20"
            ]
        ]
    },
    {
        "id": "f0069a5680d2f72c",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "AC Measurement",
        "func": "msg.measurement = \"AC\";\n\nswitch(msg.topic) {\n    case 'ac_ausgangsspannung':\n        msg.payload = { Spannung: msg.payload };\n        break;\n    case 'ac_ausgangsfrequenz':\n        msg.payload = { Frequenz: msg.payload };\n        break;\n    case 'ac_scheinleistung':\n        msg.payload = { Scheinleistung: msg.payload };\n        break;\n    case 'ac_wirkleistung':\n        msg.payload = { Wirkleistung: msg.payload };\n        break;\n    case 'ausgangslast':\n        msg.payload = { Ausgangslast: msg.payload };\n        break;\n}\n\nmsg.tags = { device: \"infini2\" };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 100,
        "wires": [
            [
                "c259f35328502a20"
            ]
        ]
    },
    {
        "id": "c34fd4f27f32bf0b",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Batterie Measurement",
        "func": "msg.measurement = \"Batterie\";\n\nswitch(msg.topic) {\n    case 'batteriespannung':\n        msg.payload = { \n            Spannung: msg.payload,\n            Spannung_WR: msg.payload\n        };\n        break;\n    case 'batterieentladestrom':\n        msg.payload = { Entladestrom: msg.payload };\n        break;\n    case 'batterieladestrom':\n        msg.payload = { Ladestrom: msg.payload };\n        break;\n    case 'batteriekapazitaet':\n        msg.payload = { Kapazitaet: msg.payload };\n        break;\n}\n\nmsg.tags = { device: \"infini2\" };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 140,
        "wires": [
            [
                "c259f35328502a20"
            ]
        ]
    },
    {
        "id": "5e3b50da5ec815df",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "PV Measurement",
        "func": "msg.measurement = \"PV\";\n\nswitch(msg.topic) {\n    case 'solarspannung1':\n        msg.payload = { \n            Spannung: msg.payload,\n            solarspannung1: msg.payload\n        };\n        break;\n    case 'solarspannung2':\n        msg.payload = { \n            Spannung2: msg.payload,\n            solarspannung2: msg.payload\n        };\n        break;\n    case 'solarleistung1':\n        msg.payload = { \n            solarleistung: msg.payload,\n            Leistung: msg.payload\n        };\n        \n        // Wh_Heute-Berechnung triggern\n        flow.set('lastPowerUpdate', Date.now());\n        flow.set('currentPower', msg.payload + (flow.get('solarPower2') || 0));\n        break;\n    case 'solarleistung2':\n        msg.payload = { \n            Leistung2: msg.payload,\n            solarleistung2: msg.payload\n        };\n        \n        // Wh_Heute-Berechnung triggern\n        flow.set('lastPowerUpdate', Date.now());\n        flow.set('currentPower', (flow.get('solarPower1') || 0) + msg.payload);\n        flow.set('solarPower2', msg.payload);\n        break;\n}\n\nmsg.tags = { device: \"infini2\" };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            [
                "c259f35328502a20"
            ]
        ]
    },
    {
        "id": "be7a6b1c3b8b5614",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Service Measurement",
        "func": "msg.measurement = \"Service\";\n\n// Zustand holen und aktualisieren\nlet serviceState = flow.get('serviceState') || {\n    Device_Status: 0,\n    Fehlercode: 0,\n    Ladestatus: 0,\n    Ladestatus2: 0,\n    Laststatus: 0,\n    MPPT1_Temperatur: 0,\n    MPPT2_Temperatur: 0,\n    Modus: 0,\n    Stromrichtung_Batt: 0,\n    Stromrichtung_Netz: 0,\n    Stromrichtung_WR: 0,\n    Temperatur: 0,\n    Warnungen: 0\n};\n\n// Feld aktualisieren\nconst fieldMap = {\n    'mode': 'Modus',\n    'fehler': 'Fehlercode',\n    'warnungen': 'Warnungen',\n    'ladestatus1': 'Ladestatus',\n    'ladestatus2': 'Ladestatus2',\n    'mppt1_temperatur': 'MPPT1_Temperatur',\n    'mppt2_temperatur': 'MPPT2_Temperatur',\n    'batteriestromrichtung': 'Stromrichtung_Batt',\n    'netzstromrichtung': 'Stromrichtung_Netz',\n    'wr_stromrichtung': 'Stromrichtung_WR',\n    'temperatur_gehaeuse': 'Temperatur'\n};\n\nif (fieldMap[msg.topic]) {\n    serviceState[fieldMap[msg.topic]] = msg.payload;\n}\n\n// Zustand speichern\nflow.set('serviceState', serviceState);\n\nmsg.payload = serviceState;\nmsg.tags = { device: \"infini2\" };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "c259f35328502a20",
                "de739a61ed346812"
            ]
        ]
    },
    {
        "id": "091641c3a2a521c3",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Info Measurement",
        "func": "msg.measurement = \"Info\";\n\n// Zustand holen und aktualisieren\nlet infoState = flow.get('infoState') || {\n    Firmware: 0,\n    Datum: new Date().toLocaleDateString('de-DE')\n};\n\nif (msg.topic === 'firmware') {\n    infoState.Firmware = msg.payload;\n}\n\n// Zustand speichern\nflow.set('infoState', infoState);\n\nmsg.payload = infoState;\nmsg.tags = { device: \"infini2\" };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 260,
        "wires": [
            [
                "c259f35328502a20"
            ]
        ]
    },
    {
        "id": "c259f35328502a20",
        "type": "influxdb out",
        "z": "f66752a974742c78",
        "influxdb": "d3c2c1c5.5c6d3",
        "name": "InfluxDB Output",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "solaranzeige2",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1060,
        "y": 120,
        "wires": []
    },
    {
        "id": "baf5c4fe378bbfb8",
        "type": "inject",
        "z": "f66752a974742c78",
        "name": "Jede Minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 380,
        "wires": [
            [
                "21bf9bc54a7ba0e9"
            ]
        ]
    },
    {
        "id": "21bf9bc54a7ba0e9",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Wh_Heute berechnen",
        "func": "const lastUpdate = flow.get('lastPowerUpdate') || Date.now();\nconst currentTime = Date.now();\nconst timeDiffHours = (currentTime - lastUpdate) / 3600000; // ms to hours\n\nconst currentPower = flow.get('currentPower') || 0;\nconst whHeute = flow.get('whHeute') || 0;\n\n// Energie = Leistung * Zeit\nconst newEnergy = currentPower * timeDiffHours;\nconst updatedWhHeute = whHeute + newEnergy;\n\n// Speichere neue Werte\nflow.set('whHeute', updatedWhHeute);\nflow.set('lastPowerUpdate', currentTime);\n\n// Erstelle InfluxDB Payload\nmsg.measurement = \"Summen\";\nmsg.payload = { Wh_Heute: updatedWhHeute };\nmsg.tags = { device: \"infini2\" };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 360,
        "wires": [
            [
                "c259f35328502a20"
            ]
        ]
    },
    {
        "id": "177ed4ea93440be5",
        "type": "inject",
        "z": "f66752a974742c78",
        "name": "Täglich um 00:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "00 00 * * *",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "072d7996dea02b8f"
            ]
        ]
    },
    {
        "id": "072d7996dea02b8f",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "Wh_Heute zurücksetzen",
        "func": "flow.set('whHeute', 0);\n\n// Erstelle Bestätigungsnachricht\nmsg.payload = \"Wh_Heute zurückgesetzt\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "de739a61ed346812",
        "type": "debug",
        "z": "f66752a974742c78",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "1697f00e1abb47e8",
        "type": "inject",
        "z": "f66752a974742c78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 520,
        "wires": [
            [
                "fa814e284bf3123f"
            ]
        ]
    },
    {
        "id": "fa814e284bf3123f",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "AUS Wächter",
        "func": "const now = Date.now();\nconst lastUpdate = flow.get('lastUpdate') || 0;\nlet simSent = flow.get('simSent') || false;\n\nconst SIMULATION_INTERVAL = 30 * 1000; // 30 Sekunden\n\nif (now - lastUpdate > SIMULATION_INTERVAL) {\n    if (!simSent) {\n        flow.set('simSent', true);\n\n        const simulatedValues = {\n            netzspannung: 0,\n            netzfrequenz: 0,\n            ac_ausgangsspannung: 0.0,\n            ac_ausgangsfrequenz: 0.0,\n            ac_scheinleistung: 0,\n            ac_wirkleistung: 0,\n            ausgangslast: 0,\n            batteriespannung: 0.0,\n            batterieentladestrom: 0.0,\n            batterieladestrom: 0,\n            batteriekapazitaet: 0,\n            temperatur_gehaeuse: 0,\n            mppt1_temperatur: 0,\n            mppt2_temperatur: 0,\n            solarleistung1: 0,\n            solarleistung2: 0,\n            solarspannung1: 0,\n            solarspannung2: 0.0,\n            ladestatus1: 0,\n            ladestatus2: 0,\n            batteriestromrichtung: 0,\n            wr_stromrichtung: 0,\n            netzstromrichtung: 0,\n            firmware: \"00\",\n            stunden: \"00\",\n            minuten: \"00\",\n            sekunden: \"00\",\n            mode: 10,\n            fehler: \"00\",\n            warnungen: 0\n        };\n\n        const outputMsgs = [];\n\n        for (const [key, value] of Object.entries(simulatedValues)) {\n            outputMsgs.push({\n                topic: `infini2/${key}`,\n                payload: value\n            });\n        }\n\n        return [outputMsgs];\n    } else {\n        return null; // Schon simuliert\n    }\n} else {\n    return null; // Kein Timeout\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 360,
        "wires": [
            [
                "f3c2edf87be50976",
                "8b9ff3e87e62fea8"
            ]
        ]
    },
    {
        "id": "f3c2edf87be50976",
        "type": "debug",
        "z": "f66752a974742c78",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 460,
        "wires": []
    },
    {
        "id": "d3724155c8f87991",
        "type": "function",
        "z": "f66752a974742c78",
        "name": "timer",
        "func": "flow.set('lastUpdate', Date.now());\nflow.set('simSent', false);  // Reset Flag, damit Simulation beim nächsten Ausfall wieder möglich ist\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "8b9ff3e87e62fea8"
            ]
        ]
    },
    {
        "id": "8d5f68accb14e50f",
        "type": "debug",
        "z": "f66752a974742c78",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 300,
        "wires": []
    },
    {
        "id": "6829590926d31d85",
        "type": "debug",
        "z": "f66752a974742c78",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 20,
        "wires": []
    },
    {
        "id": "ac9c3b24f8ec29a8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d3c2c1c5.5c6d3",
        "type": "influxdb",
        "hostname": "192.168.3.9",
        "port": "8086",
        "protocol": "http",
        "database": "solaranzeige2",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.8-flux",
        "url": "http://localhost:8086",
        "timeout": "",
        "rejectUnauthorized": false
    }
]
